# coding: utf-8

"""
    Usage API

    ## Overview These usage endpoints define the following operations: * **Usage**: Retrieve usage data for the specified time period (default is one month).          * Users must have the `View Billing` permission to access this endpoint.     * This endpoint offers visibility across all account groups within the organization.     * Users with `View Billing` permission in multiple organizations should query the endpoint with the `aid` query string parameter (see optional parameters) for each organization.  * **Quotas**: Obtain organization and account usage quotas. Additionally, users with the appropriate permissions can create, update, or delete these quotas.          * Users must have the necessary permissions to perform quota-related actions.  Refer to the API definitions below for detailed usage instructions and optional parameters.

    The version of the OpenAPI document: 7.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from usage_api.models.get_quotas200_response import GetQuotas200Response

class TestGetQuotas200Response(unittest.TestCase):
    """GetQuotas200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetQuotas200Response:
        """Test GetQuotas200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetQuotas200Response`
        """
        model = GetQuotas200Response()
        if include_optional:
            return GetQuotas200Response(
                quotas = [
                    usage_api.models.quotas_quotas_inner.Quotas_quotas_inner(
                        organization_quota = usage_api.models.organization_quota.OrganizationQuota(
                            value = 22500, 
                            org_id = '10', ), 
                        account_group_quotas = [{"value":12000,"aid":"315"},{"value":10000,"aid":"1200"}], )
                    ],
                links = usage_api.models.self_links__links.SelfLinks__links(
                    self = usage_api.models.link.Link(
                        href = 'https://api.thousandeyes.com/v7/link/to/resource/id', 
                        templated = True, 
                        type = '', 
                        deprecation = '', 
                        name = '', 
                        profile = '', 
                        title = '', 
                        hreflang = '', ), )
            )
        else:
            return GetQuotas200Response(
        )
        """

    def testGetQuotas200Response(self):
        """Test GetQuotas200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
