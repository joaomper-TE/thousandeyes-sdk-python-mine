# coding: utf-8

"""
    Instant Tests API

     ### Overview The Instant Tests API endpoint lets you create and run new instant tests. You will need to be a regular user or have the following permissions:   * `API Access`   * `View tests`  The response does not include the immediate test results. Use the Test Results endpoints to get test results after creating and executing an instant test. You can find the URLs for these endpoints in the _links section of the test definition that is returned when you create the instant test.

    The version of the OpenAPI document: 7.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from instant_tests_api.models.map_item import MapItem
from instant_tests_api.models.test_custom_headers_all import TestCustomHeadersAll
from instant_tests_api.models.test_custom_headers_root import TestCustomHeadersRoot
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TestCustomHeaders(BaseModel):
    """
    TestCustomHeaders
    """ # noqa: E501
    root: Optional[TestCustomHeadersRoot] = None
    domains: Optional[Dict[str, MapItem]] = Field(default=None, description="Use these HTTP headers for the specified domains.")
    all: Optional[TestCustomHeadersAll] = None
    __properties: ClassVar[List[str]] = ["root", "domains", "all"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TestCustomHeaders from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of root
        if self.root:
            _dict['root'] = self.root.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in domains (dict)
        _field_dict = {}
        if self.domains:
            for _key in self.domains:
                if self.domains[_key]:
                    _field_dict[_key] = self.domains[_key].to_dict()
            _dict['domains'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of all
        if self.all:
            _dict['all'] = self.all.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TestCustomHeaders from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "root": TestCustomHeadersRoot.from_dict(obj.get("root")) if obj.get("root") is not None else None,
            "domains": dict(
                (_k, MapItem.from_dict(_v))
                for _k, _v in obj.get("domains").items()
            )
            if obj.get("domains") is not None
            else None,
            "all": TestCustomHeadersAll.from_dict(obj.get("all")) if obj.get("all") is not None else None
        })
        return _obj


