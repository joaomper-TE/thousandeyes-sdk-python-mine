# coding: utf-8

"""
    Endpoint Test Results API

    Retrieve results for scheduled and dynamic tests on endpoint agents.

    The version of the OpenAPI document: 7.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from test_results_api.models.account_group_id import AccountGroupId
from test_results_api.models.dynamic_base_test_result_webex import DynamicBaseTestResultWebex
from test_results_api.models.dynamic_test_application import DynamicTestApplication
from test_results_api.models.network_profile import NetworkProfile
from test_results_api.models.system_metrics import SystemMetrics
from test_results_api.models.vpn_profile import VpnProfile
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class NetworkDynamicTestResult(BaseModel):
    """
    NetworkDynamicTestResult
    """ # noqa: E501
    agent_id: Optional[StrictStr] = Field(default=None, description="Unique ID of endpoint agent, from `/endpoint/agents` endpoint.", alias="agentId")
    aid: Optional[AccountGroupId] = None
    round_id: Optional[StrictInt] = Field(default=None, description="Epoch time (seconds) indicating the start time of the round.", alias="roundId")
    server_ip: Optional[StrictStr] = Field(default=None, description="IP address of target server.", alias="serverIp")
    system_metrics: Optional[SystemMetrics] = Field(default=None, alias="systemMetrics")
    vpn_profile: Optional[VpnProfile] = Field(default=None, alias="vpnProfile")
    network_profile: Optional[NetworkProfile] = Field(default=None, alias="networkProfile")
    avg_latency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average RTT for packets sent to destination.", alias="avgLatency")
    error_details: Optional[StrictStr] = Field(default=None, description="Error details, if an error was encountered.", alias="errorDetails")
    jitter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Standard deviation of latency.")
    is_icmp_blocked: Optional[StrictBool] = Field(default=None, description="Set to `true` if network target is blocking ICMP echo (ping) queries.", alias="isIcmpBlocked")
    loss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage of packets not reaching destination.")
    max_latency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum RTT for packets sent to destination.", alias="maxLatency")
    min_latency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum RTT for packets sent to destination.", alias="minLatency")
    application: Optional[DynamicTestApplication] = None
    webex: Optional[DynamicBaseTestResultWebex] = None
    __properties: ClassVar[List[str]] = ["agentId", "aid", "roundId", "serverIp", "systemMetrics", "vpnProfile", "networkProfile", "avgLatency", "errorDetails", "jitter", "isIcmpBlocked", "loss", "maxLatency", "minLatency", "application", "webex"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NetworkDynamicTestResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "agent_id",
                "round_id",
                "server_ip",
                "avg_latency",
                "error_details",
                "jitter",
                "is_icmp_blocked",
                "loss",
                "max_latency",
                "min_latency",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aid
        if self.aid:
            _dict['aid'] = self.aid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system_metrics
        if self.system_metrics:
            _dict['systemMetrics'] = self.system_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vpn_profile
        if self.vpn_profile:
            _dict['vpnProfile'] = self.vpn_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_profile
        if self.network_profile:
            _dict['networkProfile'] = self.network_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webex
        if self.webex:
            _dict['webex'] = self.webex.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NetworkDynamicTestResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentId": obj.get("agentId"),
            "aid": AccountGroupId.from_dict(obj.get("aid")) if obj.get("aid") is not None else None,
            "roundId": obj.get("roundId"),
            "serverIp": obj.get("serverIp"),
            "systemMetrics": SystemMetrics.from_dict(obj.get("systemMetrics")) if obj.get("systemMetrics") is not None else None,
            "vpnProfile": VpnProfile.from_dict(obj.get("vpnProfile")) if obj.get("vpnProfile") is not None else None,
            "networkProfile": NetworkProfile.from_dict(obj.get("networkProfile")) if obj.get("networkProfile") is not None else None,
            "avgLatency": obj.get("avgLatency"),
            "errorDetails": obj.get("errorDetails"),
            "jitter": obj.get("jitter"),
            "isIcmpBlocked": obj.get("isIcmpBlocked"),
            "loss": obj.get("loss"),
            "maxLatency": obj.get("maxLatency"),
            "minLatency": obj.get("minLatency"),
            "application": obj.get("application"),
            "webex": DynamicBaseTestResultWebex.from_dict(obj.get("webex")) if obj.get("webex") is not None else None
        })
        return _obj


