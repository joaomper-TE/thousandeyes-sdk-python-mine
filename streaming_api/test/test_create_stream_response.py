# coding: utf-8

"""
    ThousandEyes for OpenTelemetry

     Configure ThousandEyes to stream or push test data to a OpenTelemetry compliant endpoint with the ThousandEyes for OpenTelemetry API. 

    The version of the OpenAPI document: 7.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from streaming_api.models.create_stream_response import CreateStreamResponse

class TestCreateStreamResponse(unittest.TestCase):
    """CreateStreamResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateStreamResponse:
        """Test CreateStreamResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateStreamResponse`
        """
        model = CreateStreamResponse()
        if include_optional:
            return CreateStreamResponse(
                id = '342ieu09',
                enabled = False,
                links = streaming_api.models.stream_response__links.StreamResponse__links(
                    self = streaming_api.models.stream_response__links_self.StreamResponse__links_self(
                        href = 'https://api.thousandeyes.com/v7/streams/575766da-9664-4e85-94fe-facbe1154799', ), ),
                type = 'opentelemetry',
                endpoint_type = 'grpc',
                stream_endpoint_url = 'https://api.thousandeyes.otel-collector',
                custom_headers = {Authorization=*****, Content-Type=*****},
                tag_match = [{objectType=test, key=keyA, value=valueA}, {objectType=test, key=keyB, value=valueB}],
                audit_operation = streaming_api.models.audit_operation.AuditOperation(
                    created_by = 3962, 
                    created_date = 1679677853573, )
            )
        else:
            return CreateStreamResponse(
        )
        """

    def testCreateStreamResponse(self):
        """Test CreateStreamResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
