# coding: utf-8

"""
    Tests API

     ### Overview This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests.

    The version of the OpenAPI document: 7.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from tests_api.models.get_agent_to_server_test200_response import GetAgentToServerTest200Response

class TestGetAgentToServerTest200Response(unittest.TestCase):
    """GetAgentToServerTest200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetAgentToServerTest200Response:
        """Test GetAgentToServerTest200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetAgentToServerTest200Response`
        """
        model = GetAgentToServerTest200Response()
        if include_optional:
            return GetAgentToServerTest200Response(
                interval = 120,
                alerts_enabled = True,
                enabled = True,
                alert_rules = [
                    tests_api.models.alert_rule.AlertRule(
                        rule_id = '127094', 
                        rule_name = 'The End of the Internet', 
                        expression = '((hops((hopDelay >= 100 ms))))', 
                        direction = 'to-target', 
                        is_default = True, 
                        alert_type = 'http-server', 
                        minimum_sources = 10, 
                        minimum_sources_pct = 99, 
                        rounds_violating_mode = 'exact', 
                        rounds_violating_out_of = 5, 
                        rounds_violating_required = 2, )
                    ],
                created_by = 'user@user.com',
                created_date = '2022-07-17T22:00:54Z',
                description = 'ThousandEyes Test',
                live_share = False,
                modified_by = 'user@user.com',
                modified_date = '2022-07-17T22:00:54Z',
                saved_event = True,
                test_id = '281474976710706',
                test_name = 'ThousandEyes Test',
                type = 'agent-to-server',
                links = tests_api.models.self_links__links.SelfLinks__links(
                    self = tests_api.models.link.Link(
                        href = 'https://api.thousandeyes.com/v7/link/to/resource/id', 
                        templated = True, 
                        type = '', 
                        deprecation = '', 
                        name = '', 
                        profile = '', 
                        title = '', 
                        hreflang = '', ), ),
                labels = [
                    {"labelId":"961","name":"Artem label","isBuiltIn":false}
                    ],
                shared_with_accounts = [
                    tests_api.models.test_shared_accounts_inner.TestSharedAccounts_inner(
                        aid = '105', 
                        name = 'Account name', )
                    ],
                agents = [
                    tests_api.models.agent.Agent()
                    ],
                bandwidth_measurements = True,
                continuous_mode = False,
                fixed_packet_rate = 25,
                mtu_measurements = False,
                num_path_traces = 3,
                path_trace_mode = 'classic',
                port = 1,
                probe_mode = 'auto',
                protocol = 'tcp',
                server = 'www.thousandeyes.com',
                dscp = 'Best Effort (DSCP 0)',
                dscp_id = '0',
                ipv6_policy = 'use-agent-policy',
                ping_payload_size = 0,
                network_measurements = True,
                bgp_measurements = True,
                monitors = [
                    tests_api.models.monitor.Monitor(
                        country_id = 'GB', 
                        monitor_id = '1234', 
                        ip_address = '4.69.184.193', 
                        network = 'Level 3 Communications, Inc. (AS 3356)', 
                        monitor_type = 'public', 
                        monitor_name = 'Seattle, WA', )
                    ]
            )
        else:
            return GetAgentToServerTest200Response(
                interval = 120,
                agents = [
                    tests_api.models.agent.Agent()
                    ],
                server = 'www.thousandeyes.com',
        )
        """

    def testGetAgentToServerTest200Response(self):
        """Test GetAgentToServerTest200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
