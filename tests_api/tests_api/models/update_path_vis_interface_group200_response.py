# coding: utf-8

"""
    Tests API

     ### Overview This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests.

    The version of the OpenAPI document: 7.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from tests_api.models.self_links_links import SelfLinksLinks
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdatePathVisInterfaceGroup200Response(BaseModel):
    """
    UpdatePathVisInterfaceGroup200Response
    """ # noqa: E501
    aid: Optional[StrictStr] = Field(default=None, description="Account Group Id")
    group_id: Optional[StrictStr] = Field(default=None, description="Group ID", alias="groupId")
    group_name: Optional[StrictStr] = Field(default=None, description="Name of the path visualization interface group", alias="groupName")
    ip_addresses: Optional[List[StrictStr]] = Field(default=None, description="Array of IP addresses associated with the interface group", alias="ipAddresses")
    rdns_regexes: Optional[List[StrictStr]] = Field(default=None, description="Array of RDNS Regexes associated with the interface group", alias="rdnsRegexes")
    links: Optional[SelfLinksLinks] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["aid", "groupId", "groupName", "ipAddresses", "rdnsRegexes", "_links"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdatePathVisInterfaceGroup200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "aid",
                "group_id",
                "rdns_regexes",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdatePathVisInterfaceGroup200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aid": obj.get("aid"),
            "groupId": obj.get("groupId"),
            "groupName": obj.get("groupName"),
            "ipAddresses": obj.get("ipAddresses"),
            "rdnsRegexes": obj.get("rdnsRegexes"),
            "_links": SelfLinksLinks.from_dict(obj.get("_links")) if obj.get("_links") is not None else None
        })
        return _obj


