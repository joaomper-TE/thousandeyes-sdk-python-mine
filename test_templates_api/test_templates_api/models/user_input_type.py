# coding: utf-8

"""
    Test Template

     ## Overview  Test templates allow you create a set of tests, alert rules, dashboards, and labels from a single template configuration file.    The following applies to test templates:  * You can create tests for monitoring common services and applications such as Microsoft 365, Webex, and others using a predefined set of certified templates.  * Test templates reduce the time and complexity of creating tests for common SaaS or other services by providing a set of templates for creating tests, alert rules, and other assets within the ThousandEyes platform.  * Templates created with an account group in a particular organization are visible to all account groups in that organization, provided they have the `View Test Templates` permission.  * Credentials (usernames, passwords, tokens, etc.) can be included in a test template only as placeholders whose value is provided by user input when the template is deployed. Creating or updating a test template that contains a credentials field in plain text will result in a bad request (HTTP 400).  * The schemas to use for `labels`, `tests`, `alertRules` and `dashboards` are defined at https://developer.thousandeyes.com/v7/.  * To support referencing an asset from another asset of a different type (for example, defining the `testId` field of an `alertRule` by referencing the ID of a test defined in the template itself), the deployment of assets is done in a specific order:      1. Labels     2. Tests     3. Alert rules     4. Dashboards      For a given asset type, you can reference any asset type with a higher order. (For example, labels cannot reference other assets in the template; tests can only reference labels; alert rules can reference tests and labels, etc.)

    The version of the OpenAPI document: 7.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
import re  # noqa: F401
from enum import Enum



try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class UserInputType(str, Enum):
    """
    The type of user input field. This is used to validate the user values provided when deploying a template.   - \"string\": A string based user input. E.g., `\"https://google.com\"`  - \"number\": A number based user input. E.g., `25.8`  - \"boolean\": A boolean based user input. E.g., `false`  - \"string[]\": A list of string based user inputs. E.g., `[\"someId\", \"someOtherId\"]`  - \"number[]\": A list of number based user inputs. E.g., `[1, 2.3, 5000]`  - \"boolean[]\": A list of boolean based user inputs. E.g., `[true, false]`  - \"any\": For any other user inputs that don't belong to the types listed above. E.g., `[{\"agentId\": 22}]`  
    """

    """
    allowed enum values
    """
    STRING = 'string'
    NUMBER = 'number'
    BOOLEAN = 'boolean'
    STRING_LEFT_SQUARE_BRACKET_RIGHT_SQUARE_BRACKET = 'string[]'
    NUMBER_LEFT_SQUARE_BRACKET_RIGHT_SQUARE_BRACKET = 'number[]'
    BOOLEAN_LEFT_SQUARE_BRACKET_RIGHT_SQUARE_BRACKET = 'boolean[]'
    AGENTSELECTIONCONFIG = 'agentSelectionConfig'
    ANY = 'any'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UserInputType from a JSON string"""
        return cls(json.loads(json_str))


