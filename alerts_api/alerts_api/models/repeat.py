# coding: utf-8

"""
    Alerts API

     ## Overview Manage all alerts, alert rules and alert suppression windows.

    The version of the OpenAPI document: 7.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt
from pydantic import Field
from alerts_api.models.days_of_week import DaysOfWeek
from alerts_api.models.interval_type import IntervalType
from alerts_api.models.repeat_type import RepeatType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Repeat(BaseModel):
    """
    Repeat options.
    """ # noqa: E501
    type: Optional[RepeatType] = None
    interval_type: Optional[IntervalType] = Field(default=None, alias="intervalType")
    interval_length: Optional[StrictInt] = Field(default=None, description="Number of `intervalTypes` to wait before reactivating the alert suppression window.", alias="intervalLength")
    days_of_week: Optional[List[DaysOfWeek]] = Field(default=None, alias="daysOfWeek")
    __properties: ClassVar[List[str]] = ["type", "intervalType", "intervalLength", "daysOfWeek"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Repeat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Repeat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "intervalType": obj.get("intervalType"),
            "intervalLength": obj.get("intervalLength"),
            "daysOfWeek": obj.get("daysOfWeek")
        })
        return _obj


